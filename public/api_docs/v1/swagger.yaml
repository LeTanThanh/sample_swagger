swagger: "2.0"

info:
  title: "Example Server API"
  description: "This is document for Example Server API"
  version: "1.0.0"

host: "api.example.com"
basePath: "/api/v1"

schemes:
- https

tags:
  - name: "Pet"
    description: "API for Pet"
  - name: "Order"
    description: "API for Order"
  - name: "Category"
    description: "API for Category"
  - name: "Tag"
    description: "API for Tag"
  - name: "Store"
    description: "API for Store"
  - name: "User"
    description: "API for User"

definitions:
  Pet:
    type: "object"
    required:
      - name
      - photoUrls
    properties:
      id:
        type: "integer"
        example: 1
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "Golden"
      status:
        type: "string"
        enum:
        - available
        - pending
        - sold
        example: pending
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      petId:
        type: "integer"
        example: 1
      quantity:
        type: "integer"
        example: 10
      shipDate:
        type: "string"
        example: "2019/12/31"
      status:
        type: "string"
        enum:
        - placed
        - approved
        - delivered
        example: approved
      complete:
        type: "boolean"
        default: false
        example: true
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "Golden Dog"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      username:
        type: "string"
        example: "John"
      firstName:
        type: "string"
        example: "Smith"
      email:
        type: "string"
        example: "johnsmith@example.com"
      password:
        type: "string"
        example: "example!@#"
      phone:
        type: "string"
        example: "0987058000"
      userStatus:
        type: "integer"
        example: 1
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        name: "Special"
  ApiResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      code:
        type: "integer"
        example: 404
      type:
        type: "string"
        example: "NotFoundResponse"
      message:
        type: "string"
        example: "Object not found"

paths:
  /pet:
    post:
      tags:
      - Pet
      summary: "Create pet"
      comsumer:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        405:
          description: "Invalid input"
    put:
      tags:
      - Pet
      summary: "Update pet"
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        400:
          description: "Invalid ID"
        404:
          description: "Validation exception"
  /pet/findByStatus:
    get:
      tags:
      - Pet
      summary: "Finds Pets by status"
      produces:
      - application/json
      parameters:
      - name: "status"
        in: "query"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid status value"
  /pet/{petId}:
    get:
      tags:
      - Pet
      summary: "Get Pet by ID"
      produces:
      - application/json
      parameters:
      - name: "petId"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "Get Pet by ID success"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID"
        404:
          description: "Pet not found"
